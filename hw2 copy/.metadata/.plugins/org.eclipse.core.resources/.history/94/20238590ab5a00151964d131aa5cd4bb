import org.junit.Test;
import static org.junit.Assert.*;

/** FIXME
 *  @author Laine D Kendall
 */

public class MatrixUtilsTest {
    @Test
    public void testAccumulateVertical() {
    	double[][] m1 = {{1, 2, 3}, 
    					 {4, 6, 2}};
    	double[][] amExpected1 = {{1, 2, 3}, 
		    					  {5, 7, 4}};
		double[][] amActual1 = MatrixUtils.accumulateVertical(m1);
		int height1 = m1.length;
		for (int i = 0; i < height1; i += 1) {
			assertArrayEquals(amExpected1[i], amActual1[i], 0);
		}

    	double[][] m = {{1000000,   1000000,   1000000,   1000000},
    					{1000000,     75990,     30003,   1000000},
    					{1000000,     30002,    103046,   1000000},
    					{1000000,     29515,     38273,   1000000},
    					{1000000,     73403,     35399,   1000000},
    					{1000000,   1000000,   1000000,   1000000}};
    	double[][] amExpected = {{1000000,  1000000,   1000000,   1000000}, 
		    					 {2000000,   1075990,   1030003,   2000000},
		    					 {2075990,   1060005,   1133049,   2030003},
		    					 {2060005,   1089520,   1098278,   2133049},
		    					 {2089520,   1162923,   1124919,   2098278},
		    					 {2162923,   2124919,   2124919,   2124919}};
		double[][] amActual = MatrixUtils.accumulateVertical(m);
		int height = m.length;
		for (int i = 0; i < height; i += 1) {
			assertArrayEquals(amExpected[i], amActual[i], 0);
		}
		// System.out.println(MatrixUtils.matrixToString(m));
		// System.out.println(MatrixUtils.matrixToString(amActual));
    }

    @Test
    public void testAccumulate() {
    	double[][] m1 = {{1, 2, 3}, 
    					 {4, 6, 2}};
    	double[][] amExpected1 = {{1, 2, 3}, 
		    					  {5, 7, 4}};
		double[][] amActual1 = MatrixUtils.accumulate(m1, MatrixUtils.Orientation.VERTICAL);
		
		// System.out.println(MatrixUtils.matrixToString(m1));
		// System.out.println(MatrixUtils.matrixToString(amActual1));

		int height1 = m1.length;
		for (int i = 0; i < height1; i += 1) {
			assertArrayEquals(amExpected1[i], amActual1[i], 0);
		}

		double[][] m2 = {{1, 2, 3}, 
    					 {4, 6, 2}};
    					 
    	System.out.println("original ");
		System.out.println(MatrixUtils.matrixToString(m2));

    	double[][] amExpected2 = {{1, 3, 6}, 
		    					  {4, 7, 5}};
		double[][] amActual2 = MatrixUtils.accumulate(m2, MatrixUtils.Orientation.HORIZONTAL);
		
		System.out.println("changed ");
		System.out.println(MatrixUtils.matrixToString(amActual2));

		int height2 = m2.length;
		for (int i = 0; i < height2; i += 1) {
			assertArrayEquals(amExpected2[i], amActual2[i], 0);
		}


		double[][] m = {{1000000,   1000000,   1000000,   1000000},
    					{1000000,     75990,     30003,   1000000},
    					{1000000,     30002,    103046,   1000000},
    					{1000000,     29515,     38273,   1000000},
    					{1000000,     73403,     35399,   1000000},
    					{1000000,   1000000,   1000000,   1000000}};
    	double[][] amExpected = {{1000000,   2000000,   2075990,   2060005},
		    					 {1000000,   1075990,   1060005,   2060005},
		    					 {1000000,   1030002,   1132561,   2060005},
		    					 {1000000,   1029515,   1067788,   2064914},
		    					 {1000000,   1073403,   1064914,   2064914},
		    					 {1000000,   2000000,   2073403,   2064914}};
		double[][] amActual = MatrixUtils.accumulate(m, MatrixUtils.Orientation.HORIZONTAL);
		int height = m.length;
		for (int i = 0; i < height; i += 1) {
			assertArrayEquals(amExpected[i], amActual[i], 0);
		}
		System.out.println(MatrixUtils.matrixToString(m));
		System.out.println(MatrixUtils.matrixToString(amActual));


    }

    public static void main(String[] args) {
        System.exit(ucb.junit.textui.runClasses(MatrixUtilsTest.class));
    }
}
