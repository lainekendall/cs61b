/* NOTE: The file ArrayUtil.java contains some functions that may be useful
 * in testing your answers. */

/** HW #2, Problem #2. */

/**
 * Array utilities.
 *
 * @author Laine D Kendall
 */
class Arrays {
    /* 2a. */
    /**
     * Returns a new array consisting of the elements of A followed by the the
     * elements of B.
     */
    static int[] catenate(int[] A, int[] B) {
        /* *Replace this body with the solution. */
        int[] result = new int[A.length + B.length];
        int i = 0;
        for (int x : A) {
            result[i] = x;
            i += 1;
        }
        for (int x : B) {
            result[i] = x;
            i += 1;
        }
        return result;
    }

    /* 2b. */
    /**
     * Returns the array formed by removing LEN items from A, beginning with
     * item #START.
     */
    static int[] remove(int[] A, int start, int len) {
        /* *Replace this body with the solution. */
        if (start >= A.length) {
            return A;
        } else if (len > A.length) {
            len = A.length - start;
        }
        int[] beginning = new int[start];
        int[] end = new int[A.length - start - len];
        beginning = java.util.Arrays.copyOfRange(A, 0, start);
        end = java.util.Arrays.copyOfRange(A, len + start, A.length);
        return catenate(beginning, end);
    }
}

/* 4 (optional). */
/**
 * Returns the array of arrays formed by breaking up A into maximal ascending
 * lists, without reordering. For example, if A is {1, 3, 7, 5, 4, 6, 9, 10},
 * then returns the three-element array {{1, 3, 7}, {5}, {4, 6, 9, 10}}.
 *
 * static int[][] naturalRuns(int[] A) { }
 * 
 * static int[] naturalRunsHelper(int[] B) { if (B.length <= 1) { return B; }
 * else { return subarray(); } } }
 */
